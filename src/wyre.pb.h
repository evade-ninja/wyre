// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wyre.proto

#ifndef PROTOBUF_wyre_2eproto__INCLUDED
#define PROTOBUF_wyre_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace protobuf_wyre_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsDataChunkImpl();
void InitDefaultsDataChunk();
inline void InitDefaults() {
  InitDefaultsDataChunk();
}
}  // namespace protobuf_wyre_2eproto
namespace wyre {
namespace proto {
class DataChunk;
class DataChunkDefaultTypeInternal;
extern DataChunkDefaultTypeInternal _DataChunk_default_instance_;
}  // namespace proto
}  // namespace wyre
namespace wyre {
namespace proto {

enum DataChunk_Source {
  DataChunk_Source_UNKNOWN = 0,
  DataChunk_Source_FILE = 1,
  DataChunk_Source_COMMAND = 2,
  DataChunk_Source_DataChunk_Source_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DataChunk_Source_DataChunk_Source_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DataChunk_Source_IsValid(int value);
const DataChunk_Source DataChunk_Source_Source_MIN = DataChunk_Source_UNKNOWN;
const DataChunk_Source DataChunk_Source_Source_MAX = DataChunk_Source_COMMAND;
const int DataChunk_Source_Source_ARRAYSIZE = DataChunk_Source_Source_MAX + 1;

// ===================================================================

class DataChunk : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:wyre.proto.DataChunk) */ {
 public:
  DataChunk();
  virtual ~DataChunk();

  DataChunk(const DataChunk& from);

  inline DataChunk& operator=(const DataChunk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataChunk(DataChunk&& from) noexcept
    : DataChunk() {
    *this = ::std::move(from);
  }

  inline DataChunk& operator=(DataChunk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DataChunk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataChunk* internal_default_instance() {
    return reinterpret_cast<const DataChunk*>(
               &_DataChunk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DataChunk* other);
  friend void swap(DataChunk& a, DataChunk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataChunk* New() const PROTOBUF_FINAL { return New(NULL); }

  DataChunk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DataChunk& from);
  void MergeFrom(const DataChunk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataChunk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DataChunk_Source Source;
  static const Source UNKNOWN =
    DataChunk_Source_UNKNOWN;
  static const Source FILE =
    DataChunk_Source_FILE;
  static const Source COMMAND =
    DataChunk_Source_COMMAND;
  static inline bool Source_IsValid(int value) {
    return DataChunk_Source_IsValid(value);
  }
  static const Source Source_MIN =
    DataChunk_Source_Source_MIN;
  static const Source Source_MAX =
    DataChunk_Source_Source_MAX;
  static const int Source_ARRAYSIZE =
    DataChunk_Source_Source_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // string description = 1;
  void clear_description();
  static const int kDescriptionFieldNumber = 1;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // bytes finalHash = 10;
  void clear_finalhash();
  static const int kFinalHashFieldNumber = 10;
  const ::std::string& finalhash() const;
  void set_finalhash(const ::std::string& value);
  #if LANG_CXX11
  void set_finalhash(::std::string&& value);
  #endif
  void set_finalhash(const char* value);
  void set_finalhash(const void* value, size_t size);
  ::std::string* mutable_finalhash();
  ::std::string* release_finalhash();
  void set_allocated_finalhash(::std::string* finalhash);

  // .wyre.proto.DataChunk.Source source = 2;
  void clear_source();
  static const int kSourceFieldNumber = 2;
  ::wyre::proto::DataChunk_Source source() const;
  void set_source(::wyre::proto::DataChunk_Source value);

  // bool finished = 4;
  void clear_finished();
  static const int kFinishedFieldNumber = 4;
  bool finished() const;
  void set_finished(bool value);

  // uint64 fileSize = 11;
  void clear_filesize();
  static const int kFileSizeFieldNumber = 11;
  ::google::protobuf::uint64 filesize() const;
  void set_filesize(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:wyre.proto.DataChunk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr finalhash_;
  int source_;
  bool finished_;
  ::google::protobuf::uint64 filesize_;
  mutable int _cached_size_;
  friend struct ::protobuf_wyre_2eproto::TableStruct;
  friend void ::protobuf_wyre_2eproto::InitDefaultsDataChunkImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataChunk

// string description = 1;
inline void DataChunk::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataChunk::description() const {
  // @@protoc_insertion_point(field_get:wyre.proto.DataChunk.description)
  return description_.GetNoArena();
}
inline void DataChunk::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wyre.proto.DataChunk.description)
}
#if LANG_CXX11
inline void DataChunk::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wyre.proto.DataChunk.description)
}
#endif
inline void DataChunk::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wyre.proto.DataChunk.description)
}
inline void DataChunk::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wyre.proto.DataChunk.description)
}
inline ::std::string* DataChunk::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:wyre.proto.DataChunk.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataChunk::release_description() {
  // @@protoc_insertion_point(field_release:wyre.proto.DataChunk.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataChunk::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:wyre.proto.DataChunk.description)
}

// .wyre.proto.DataChunk.Source source = 2;
inline void DataChunk::clear_source() {
  source_ = 0;
}
inline ::wyre::proto::DataChunk_Source DataChunk::source() const {
  // @@protoc_insertion_point(field_get:wyre.proto.DataChunk.source)
  return static_cast< ::wyre::proto::DataChunk_Source >(source_);
}
inline void DataChunk::set_source(::wyre::proto::DataChunk_Source value) {
  
  source_ = value;
  // @@protoc_insertion_point(field_set:wyre.proto.DataChunk.source)
}

// bytes data = 3;
inline void DataChunk::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataChunk::data() const {
  // @@protoc_insertion_point(field_get:wyre.proto.DataChunk.data)
  return data_.GetNoArena();
}
inline void DataChunk::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wyre.proto.DataChunk.data)
}
#if LANG_CXX11
inline void DataChunk::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wyre.proto.DataChunk.data)
}
#endif
inline void DataChunk::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wyre.proto.DataChunk.data)
}
inline void DataChunk::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wyre.proto.DataChunk.data)
}
inline ::std::string* DataChunk::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:wyre.proto.DataChunk.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataChunk::release_data() {
  // @@protoc_insertion_point(field_release:wyre.proto.DataChunk.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataChunk::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:wyre.proto.DataChunk.data)
}

// bool finished = 4;
inline void DataChunk::clear_finished() {
  finished_ = false;
}
inline bool DataChunk::finished() const {
  // @@protoc_insertion_point(field_get:wyre.proto.DataChunk.finished)
  return finished_;
}
inline void DataChunk::set_finished(bool value) {
  
  finished_ = value;
  // @@protoc_insertion_point(field_set:wyre.proto.DataChunk.finished)
}

// bytes finalHash = 10;
inline void DataChunk::clear_finalhash() {
  finalhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataChunk::finalhash() const {
  // @@protoc_insertion_point(field_get:wyre.proto.DataChunk.finalHash)
  return finalhash_.GetNoArena();
}
inline void DataChunk::set_finalhash(const ::std::string& value) {
  
  finalhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wyre.proto.DataChunk.finalHash)
}
#if LANG_CXX11
inline void DataChunk::set_finalhash(::std::string&& value) {
  
  finalhash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wyre.proto.DataChunk.finalHash)
}
#endif
inline void DataChunk::set_finalhash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  finalhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wyre.proto.DataChunk.finalHash)
}
inline void DataChunk::set_finalhash(const void* value, size_t size) {
  
  finalhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wyre.proto.DataChunk.finalHash)
}
inline ::std::string* DataChunk::mutable_finalhash() {
  
  // @@protoc_insertion_point(field_mutable:wyre.proto.DataChunk.finalHash)
  return finalhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataChunk::release_finalhash() {
  // @@protoc_insertion_point(field_release:wyre.proto.DataChunk.finalHash)
  
  return finalhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataChunk::set_allocated_finalhash(::std::string* finalhash) {
  if (finalhash != NULL) {
    
  } else {
    
  }
  finalhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), finalhash);
  // @@protoc_insertion_point(field_set_allocated:wyre.proto.DataChunk.finalHash)
}

// uint64 fileSize = 11;
inline void DataChunk::clear_filesize() {
  filesize_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DataChunk::filesize() const {
  // @@protoc_insertion_point(field_get:wyre.proto.DataChunk.fileSize)
  return filesize_;
}
inline void DataChunk::set_filesize(::google::protobuf::uint64 value) {
  
  filesize_ = value;
  // @@protoc_insertion_point(field_set:wyre.proto.DataChunk.fileSize)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace wyre

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::wyre::proto::DataChunk_Source> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_wyre_2eproto__INCLUDED
